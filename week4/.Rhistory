col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
data(GSE5859)
ge <- exprs(e) #ge for gene expressions
# 1) lets plot boxplot of data distribution for all 208 samples
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with no error") # future outlier nr.49 will be color code 1 (i.e. green)
# now, let us manipulate the data from sample number 49 by introducing an error
ge[,49] <- ge[,49]/log2(exp(1)) ## error:data curators use log(base 2) [i.e. log2()] instead of log(base e) [i.e. log()] to transform data
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
?t
?quantile
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
qs
dim(qs)
?matplot
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 2)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 3)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 4)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 10)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 7)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l")
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l")
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1)
library(Biobase)
#devtools::install_github("genomicsclass/GSE5859") #install GSE5859 library if you have not done yet
library(GSE5859)
data(GSE5859)
ge <- exprs(e) #ge for gene expressions
# 1) lets plot boxplot of data distribution for all 208 samples
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with no error") # future outlier nr.49 will be color code 1 (i.e. green)
# now, let us manipulate the data from sample number 49 by introducing an error
ge[,49] <- ge[,49]/log2(exp(1)) ## error:data curators use log(base 2) [i.e. log2()] instead of log(base e) [i.e. log()] to transform data
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1)
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, y = c(1,2,3,4,5) , type = "l", lty = 1, xlab = )
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = )
axis(side = 1, at = seq(1,200,20))
axis(side = 1, at = seq(1,200,25))
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs")
axis(side = 1, at = seq(1,200,25))
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs")
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", axt = "n")
at_ apply(X = qs, MARGIN = , FUN = mean)
axis(side = 2, at = at_, labels = c("5% quantile, 25% quantile, 50% quantile, 75% quantile, 95% quantile,"))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles")
at_ apply(X = qs, MARGIN = , FUN = mean)
axis(side = 2, at = at_, labels = c("5%, 25% , 50% , 75% , 95%"))
at_ = apply(X = qs, MARGIN = 2, FUN = mean)
at_+
at_
at_ = apply(X = qs, MARGIN = 2, FUN = median)
at_
axis(side = 2, at = at_, labels = c("5%, 25% , 50% , 75% , 95%"))
at_
labels_ = c("5%, 25% , 50% , 75% , 95%")
labels_
at_ = lapply(X = qs, MARGIN = 2, FUN = median)
at_
sapply(X = qs, MARGIN = 2, FUN = median)
apply(X = qs, MARGIN = 2, FUN = median)
typeof(at_)
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
at_
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%, 25% , 50% , 75% , 95%")
axis(side = 2, at = at_, labels = labels_)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%, 25% , 50% , 75% , 95%")
axis(side = 2, at = at_, labels = labels_)
axis(side = 2, at = at_)
axis(side = 2, at = at_, labels = labels_)
length(at_)
length(labels_)
labels_
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_)
library(rafalib)
mypar(1,1)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
library(rafalib)
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1, las = 1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1, las = 2)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n", las = 1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n", las = 2)
axis(side = 2, at = at_, labels = labels_, las = 2) # argument las to rotate labels of tick marks)
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_) # argument las to rotate labels of tick marks)
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
library(rafalib)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantiles", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
text(y = "quantiles", srt = 90)
text(x = "", y = "quantiles", srt = 90)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", ylab = "quantile", yaxt = "n")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
library(rafalib)
boxplot(x = ge,
range = 0,
names = 1:ncol(e),
col = ifelse(1:ncol(ge) == 49, yes = "green", no = "red"),
main = "Data with error in sample #49")
# to better visualize this outlier we can plot the quantiles instead
# compute the 5%, 25%, 50%, 75%, 95% percentiles
qs <- t(apply(X = ge, MARGIN = 2, FUN = quantile, probs = c(0.05, 0.25, 0.50, 0.75, 0.95)))
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", yaxt = "n", main = "quantiles vs. samples")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
# now plot the graphs for each quantile (i.e. each column of qs)
mypar(1,1)
matplot(x = qs, type = "l", lty = 1, xlab = "sample IDs", yaxt = "n", main = "quantiles (qs) vs. samples (sample IDs)")
at_ = as.numeric(apply(X = qs, MARGIN = 2, FUN = median))
labels_ = c("5%", "25%" , "50%" , "75%" , "95%")
axis(side = 2, at = at_, labels = labels_, las = 1) # argument las to rotate labels of tick marks)
?shist
# alternative: plot all "smooth" histograms for each sample ID (total:208)
mypar(1,1)
shist(ge, unit = 0.5)
x <- ge[ ,1]
y <- ge[ ,2]
mypar(1,2)
plot(x,y)
diff_x_y <- x-y
diff_btw_x_y <- x-y
mean_btw_x_y <- mean(x+y)
plot(mean_btw_x_y, diff_btw_x_y)
mean_btw_x_y <- apply(X = x+y,MARGIN = 2, FUN = mean)
mean_btw_x_y <- apply(X = x+y, MARGIN = 1, FUN = mean)
diff_btw_x_y <- x-y
mean_btw_x_y <- (x+y)/2
plot(mean_btw_x_y, diff_btw_x_y)
apply(x+y, 1, mean)
x
dim(x)
x <- ge[ ,1]
y <- ge[ ,2]
mypar(1,2)
plot(x,y)
diff_btw_x_y <- x-y
mean_btw_x_y <- (x+y)/2
plot((x+y)/2, x-y)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
requireNamespace("BioManager")
requireNamespace("BiocManager")
requireNamespace("BiocManager", quietly = T)
?requireNamespace
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SpikeInSubset")
library(SpikeInSubset)
data(mas133)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SpikeInSubset")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("SpikeInSubset") #install SpikeInSubset if you do not have it yet
library(SpikeInSubset)
data(mas133)
?paste
?paste0
paste("Amine", "Subin")
paste("Amine", "Subin", collapse = TRUE)
paste("Amine", "Subin", collapse)
paste("Amine", "Subin")
paste("Amine", "Subin", collapse = NULL)
paste("Amine", "Subin", collapse = F)
paste("Amine", "Subin", collapse = 1)
paste("Amine", "Subin", collapse = " ")
paste("Amine", "Subin", collapse = "X")
paste("Amine", "Subin", sep =  " ")
paste("Amine", "Subin", sep =  "")
paste("Amine", "Subin", sep =  " ")
paste("Amine", "Subin", sep =  "X
")
paste("Amine", "Subin", sep =  "X")
paste(1:10)
paste(1:10, sep = " ")
paste(1:10, sep = "")
paste0(1:10)
LETTERS
paste(1:4, letters[1:4])
paste("A", 1, "%")
paste(1:10)
paste(1:10, collapse = "")
paste0("a", "b")
paste0("a", "b") == paste("a", "b", sep = "")
message(sprintf("On %s I realized %s was ... \n%s by the street", Sys.Date() , "Grover", "flying"))
sprintf("On %s I realized %s was ... \n%s by the street", Sys.Date() , "Grover", "flying")
?message
?signif
?signif
# plot first two samples
sample1 <- e[,1]
sample2 <- e[,2]
cor_samples <- cor(sample1,sample2)
?cex
??cex
plot(sample1, sample2, main = paste0("corr=", signif(cor_samples, digits = 3)), cex = 0.5)
# plot first two samples
sample1 <- e[,1]
sample2 <- e[,2]
cor_samples <- cor(sample1,sample2)
plot(sample1, sample2, main = paste0("corr=", signif(cor_samples, digits = 3)), cex = 0.5)
e <- exprs(mas133)
# plot first two samples
sample1 <- e[,1]
sample2 <- e[,2]
cor_samples <- cor(sample1,sample2)
plot(sample1, sample2, main = paste0("corr=", signif(cor_samples, digits = 3)), cex = 0.5)
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
polygon(c(-b,k,k,-b))
polygon(c(-b, k, k, -b), c(-b, -b, k, k))
k <- 3000
b <- 1000 #a buffer
polygon(c(-b, k, k, -b), c(-b, -b, k, k))
?polygon
polygon(c(-b, k, k, -b), c(-b, -b, k, k), col = "red")
# plot first two samples
sample1 <- e[,1]
sample2 <- e[,2]
cor_samples <- cor(sample1,sample2)
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
polygon(c(-b, k, k, -b), c(-b, -b, k, k), col = "red")
polygon(c(-b, k, k, -b), c(-b, -b, k, k), col = "red", density = 0)
<- cor(sample1,sample2)
mypar(1,1)
<- cor(sample1,sample2)
mypar(1,1)
<- cor(sample1,sample2)
mypar(1,1)
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
polygon(c(-b, k, k, -b), c(-b, -b, k, k), col = "red", density = 0)
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
polygon(c(-b, k, k, -b), c(-b, -b, k, k), border = "red")
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
#polygon(c(-b, k, k, -b), c(-b, -b, k, k), border = "red")
polygon(c(-b,k,k,-b),c(-b,-b,k,k),col="red",density=0,border="red")
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
#polygon(c(-b, k, k, -b), c(-b, -b, k, k), border = "red")
polygon(c(-b,k,k,-b),c(-b,-b,k,k),col="red",density=0,border="red")
LIMs <- c(-b,k)
count_inside <- sum(sample1 %in% LIMs & sample2 %in% LIMs)
sample1 %in% LIMs
LIMs
count_inside <- sum(sample1 < max_val & sample2 < max_val)
# we see that all values are strictly positive
max_val <- k
count_inside <- sum(sample1 < max_val & sample2 < max_val)
length(sample1)*2
count_total <- 2*length(sample1)
prop_ex1 <- count_inside/count_total
print(prop_ex1)
range(sample1)
min(sample1)
range(sample2)
# we see that all values are strictly positive
max_val <- k
count_inside <- sum(sample1 <= max_val & sample2 <= max_val)
count_total <- 2*length(sample1)
prop_ex1 <- count_inside/count_total
print(prop_ex1)
# we see that all values are strictly positive
max_val <- k
count_inside <- sum(sample1 <= max_val & sample2 <= max_val)
count_total <- length(sample1)
prop_ex1 <- count_inside/count_total
print(prop_ex1)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("SpikeInSubset") #install SpikeInSubset if you do not have it yet
library(SpikeInSubset)
data(mas133)
e <- exprs(mas133)
# plot first two samples
sample1 <- e[,1]
sample2 <- e[,2]
cor_samples <- cor(sample1,sample2)
mypar(1,1)
plot(sample1, sample2, main = paste("corr =", signif(cor_samples, digits = 3)), cex = 0.5)
k <- 3000
b <- 1000 #a buffer
polygon(c(-b, k, k, -b), c(-b, -b, k, k), border = "red")
# we see that all values are strictly positive
max_val <- k
count_points_inside <- sum(sample1 <= max_val & sample2 <= max_val)
count_points_total <- length(sample1)
prop_ex1 <- count_points_inside/count_points_total
print(prop_ex1)
log_sample1 <- log2(sample1)
log_sample2 <- log2(sample2)
log_sample1 <- log2(sample1)
log_sample2 <- log2(sample2)
mypar(1,1)
cor_log_samples <- cor(log_sample1, log_sample2)
mypar(1,1)
plot(log_sample1, log_sample2, main = paste("log-values & corr =", signif(cor_log_samples, digits = 3)), cex = 0.5)
min(sample1)
log2(0.5)
log_k <- log2(k)
k_new <- log2(k)
b_new <- log2(0.5) #log2(1/2) = log2(1) - log2(2) = 0 - 1 = -1
polygon(c(-b_new, k_new, k_new, -b_new), c(-b_new, -b_new, k_new, k_new), border = "red")
# convert expression data into log2 scale
e <- log2(exprs(mas133))
1+2
# create and MA plot (is equiv. to Bland-Altman plot) for two samples s1 and s2
# MA plot x-axis: average of 2 samples: (s1+s2)/2
# MA plot y-axis: difference btw 2 samples: s1-s2
s1 <- e[,1]
s2 <- e[,2]
plot(x = (s1+s2)/2, y = s2-s1, cex = 0.5)
plot(x = (s1+s2)/2, y = s2-s1, cex = 0.5, main = "Difference vs. average (MA plot) aka Bland-Altman plot")
plot(x = (s1+s2)/2, y = s2-s1, cex = 0.5, main = "MA plot: Difference vs. average (aka Bland-Altman plot)")
# because the values are in log scale, we need to consider that the value we are looking for, here log ratio: log2(s2/s1)
# equals to log2(s2) -log2(s1). Now because we already applied the log2() transformation in line 54, we can simply compute the log ratio as:
# s2 - s1. Thus, we need to compute the SD (standard deviation) of log-ratio= s2 - s1
log_ratio <- s2 - s1
# because the values are in log scale, we need to consider that the value we are looking for, here log ratio: log2(s2/s1)
# equals to log2(s2) -log2(s1). Now because we already applied the log2() transformation in line 54, we can simply compute the log ratio as:
# s2 - s1. Thus, we need to compute the SD (standard deviation) of log-ratio= s2 - s1
log_ratio <- s2 - s1
SD_log_ratio <- sd(log_ratio)
print(SD_log_ratio)
min(s2 -s1)
cat("alternative answer:\n")
print(sqrt(mean( (e[,2]-e[,1])^2)))
diffs <- s2 - s1
abs_diffs <- abs(diffs)
# question: how many cases do we have, where the difference is larger than a factor of 2.
# We know that for log2() transformed values, a increase of factor 2 in the original data corresponds to increase of 1 unit in the log2() transformed values
counts_ex4 <- sum(abs_diffs >= 2)
print(counts_ex4)
# question: how many cases do we have, where the difference is larger than a factor of 2.
# We know that for log2() transformed values, a increase of factor 2 in the original data corresponds to increase of 1 unit in the log2() transformed values
counts_ex4 <- sum(abs_diffs > 2)
print(counts_ex4)
# question: how many cases do we have, where the difference is larger than a factor of 2.
# We know that for log2() transformed values, a increase of factor 2 in the original data corresponds to increase of 1 unit in the log2() transformed values
counts_ex4 <- sum(abs_diffs > 1)
print(counts_ex4)
